// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Starshine.Authservice.EntityFrameworkCore;
using Volo.Abp.EntityFrameworkCore;

#nullable disable

namespace Starshine.Authservice.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(AuthserviceDbContext))]
    [Migration("20241218135631_InitTable")]
    partial class InitTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.Sqlite)
                .HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("Starshine.Authservice.Domain.ApiResources.ApiResource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("AllowedAccessTokenSigningAlgorithms")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("allowed_access_token_signing_algorithms");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("TEXT")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("display_name");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("enabled");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("TEXT")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("INTEGER")
                        .HasColumnName("show_in_discovery_document");

                    b.HasKey("Id")
                        .HasName("pk_auth_api_resources");

                    b.ToTable("AuthApiResources", (string)null);
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.ApiResources.ApiResourceClaim", b =>
                {
                    b.Property<Guid>("ApiResourceId")
                        .HasColumnType("TEXT")
                        .HasColumnName("api_resource_id");

                    b.Property<string>("Type")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.HasKey("ApiResourceId", "Type")
                        .HasName("pk_auth_api_resource_claims");

                    b.ToTable("AuthApiResourceClaims", (string)null);
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.ApiResources.ApiResourceProperty", b =>
                {
                    b.Property<Guid>("ApiResourceId")
                        .HasColumnType("TEXT")
                        .HasColumnName("api_resource_id");

                    b.Property<string>("Key")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT")
                        .HasColumnName("key");

                    b.Property<string>("Value")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("ApiResourceId", "Key", "Value")
                        .HasName("pk_auth_api_resource_properties");

                    b.ToTable("AuthApiResourceProperties", (string)null);
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.ApiResources.ApiResourceScope", b =>
                {
                    b.Property<Guid>("ApiResourceId")
                        .HasColumnType("TEXT")
                        .HasColumnName("api_resource_id");

                    b.Property<string>("Scope")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("scope");

                    b.HasKey("ApiResourceId", "Scope")
                        .HasName("pk_auth_api_resource_scopes");

                    b.ToTable("AuthApiResourceScopes", (string)null);
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.ApiResources.ApiResourceSecret", b =>
                {
                    b.Property<Guid>("ApiResourceId")
                        .HasColumnType("TEXT")
                        .HasColumnName("api_resource_id");

                    b.Property<string>("Type")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("TEXT")
                        .HasColumnName("expiration");

                    b.HasKey("ApiResourceId", "Type", "Value")
                        .HasName("pk_auth_api_resource_secrets");

                    b.ToTable("AuthApiResourceSecrets", (string)null);
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.ApiScopes.ApiScope", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("TEXT")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("display_name");

                    b.Property<bool>("Emphasize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("emphasize");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("enabled");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("TEXT")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<bool>("Required")
                        .HasColumnType("INTEGER")
                        .HasColumnName("required");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("INTEGER")
                        .HasColumnName("show_in_discovery_document");

                    b.HasKey("Id")
                        .HasName("pk_auth_api_scopes");

                    b.ToTable("AuthApiScopes", (string)null);
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.ApiScopes.ApiScopeClaim", b =>
                {
                    b.Property<Guid>("ApiScopeId")
                        .HasColumnType("TEXT")
                        .HasColumnName("api_scope_id");

                    b.Property<string>("Type")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.HasKey("ApiScopeId", "Type")
                        .HasName("pk_auth_api_scope_claims");

                    b.ToTable("AuthApiScopeClaims", (string)null);
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.ApiScopes.ApiScopeProperty", b =>
                {
                    b.Property<Guid>("ApiScopeId")
                        .HasColumnType("TEXT")
                        .HasColumnName("api_scope_id");

                    b.Property<string>("Key")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT")
                        .HasColumnName("key");

                    b.Property<string>("Value")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("ApiScopeId", "Key", "Value")
                        .HasName("pk_auth_api_scope_properties");

                    b.ToTable("AuthApiScopeProperties", (string)null);
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.Clients.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<int>("AbsoluteRefreshTokenLifetime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("absolute_refresh_token_lifetime");

                    b.Property<int>("AccessTokenLifetime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("access_token_lifetime");

                    b.Property<int>("AccessTokenType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("access_token_type");

                    b.Property<bool>("AllowAccessTokensViaBrowser")
                        .HasColumnType("INTEGER")
                        .HasColumnName("allow_access_tokens_via_browser");

                    b.Property<bool>("AllowOfflineAccess")
                        .HasColumnType("INTEGER")
                        .HasColumnName("allow_offline_access");

                    b.Property<bool>("AllowPlainTextPkce")
                        .HasColumnType("INTEGER")
                        .HasColumnName("allow_plain_text_pkce");

                    b.Property<bool>("AllowRememberConsent")
                        .HasColumnType("INTEGER")
                        .HasColumnName("allow_remember_consent");

                    b.Property<string>("AllowedIdentityTokenSigningAlgorithms")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("allowed_identity_token_signing_algorithms");

                    b.Property<bool>("AlwaysIncludeUserClaimsInIdToken")
                        .HasColumnType("INTEGER")
                        .HasColumnName("always_include_user_claims_in_id_token");

                    b.Property<bool>("AlwaysSendClientClaims")
                        .HasColumnType("INTEGER")
                        .HasColumnName("always_send_client_claims");

                    b.Property<int>("AuthorizationCodeLifetime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("authorization_code_lifetime");

                    b.Property<bool>("BackChannelLogoutSessionRequired")
                        .HasColumnType("INTEGER")
                        .HasColumnName("back_channel_logout_session_required");

                    b.Property<string>("BackChannelLogoutUri")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasColumnName("back_channel_logout_uri");

                    b.Property<string>("ClientClaimsPrefix")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("client_claims_prefix");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("client_name");

                    b.Property<string>("ClientUri")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasColumnName("client_uri");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<int?>("ConsentLifetime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("consent_lifetime");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("TEXT")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<int>("DeviceCodeLifetime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("device_code_lifetime");

                    b.Property<bool>("EnableLocalLogin")
                        .HasColumnType("INTEGER")
                        .HasColumnName("enable_local_login");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("enabled");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("FrontChannelLogoutSessionRequired")
                        .HasColumnType("INTEGER")
                        .HasColumnName("front_channel_logout_session_required");

                    b.Property<string>("FrontChannelLogoutUri")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasColumnName("front_channel_logout_uri");

                    b.Property<int>("IdentityTokenLifetime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("identity_token_lifetime");

                    b.Property<bool>("IncludeJwtId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("include_jwt_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("TEXT")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("LogoUri")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasColumnName("logo_uri");

                    b.Property<string>("PairWiseSubjectSalt")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("pair_wise_subject_salt");

                    b.Property<string>("ProtocolType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("protocol_type");

                    b.Property<int>("RefreshTokenExpiration")
                        .HasColumnType("INTEGER")
                        .HasColumnName("refresh_token_expiration");

                    b.Property<int>("RefreshTokenUsage")
                        .HasColumnType("INTEGER")
                        .HasColumnName("refresh_token_usage");

                    b.Property<bool>("RequireClientSecret")
                        .HasColumnType("INTEGER")
                        .HasColumnName("require_client_secret");

                    b.Property<bool>("RequireConsent")
                        .HasColumnType("INTEGER")
                        .HasColumnName("require_consent");

                    b.Property<bool>("RequirePkce")
                        .HasColumnType("INTEGER")
                        .HasColumnName("require_pkce");

                    b.Property<bool>("RequireRequestObject")
                        .HasColumnType("INTEGER")
                        .HasColumnName("require_request_object");

                    b.Property<int>("SlidingRefreshTokenLifetime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sliding_refresh_token_lifetime");

                    b.Property<bool>("UpdateAccessTokenClaimsOnRefresh")
                        .HasColumnType("INTEGER")
                        .HasColumnName("update_access_token_claims_on_refresh");

                    b.Property<string>("UserCodeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("user_code_type");

                    b.Property<int?>("UserSsoLifetime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_sso_lifetime");

                    b.HasKey("Id")
                        .HasName("pk_auth_clients");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_auth_clients_client_id");

                    b.ToTable("AuthClients", (string)null);
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.Clients.ClientClaim", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT")
                        .HasColumnName("client_id");

                    b.Property<string>("Type")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("ClientId", "Type", "Value")
                        .HasName("pk_auth_client_claims");

                    b.ToTable("AuthClientClaims", (string)null);
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.Clients.ClientCorsOrigin", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT")
                        .HasColumnName("client_id");

                    b.Property<string>("Origin")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("origin");

                    b.HasKey("ClientId", "Origin")
                        .HasName("pk_auth_client_cors_origins");

                    b.ToTable("AuthClientCorsOrigins", (string)null);
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.Clients.ClientGrantType", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT")
                        .HasColumnName("client_id");

                    b.Property<string>("GrantType")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT")
                        .HasColumnName("grant_type");

                    b.HasKey("ClientId", "GrantType")
                        .HasName("pk_auth_client_grant_types");

                    b.ToTable("AuthClientGrantTypes", (string)null);
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.Clients.ClientIdPRestriction", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT")
                        .HasColumnName("client_id");

                    b.Property<string>("Provider")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("provider");

                    b.HasKey("ClientId", "Provider")
                        .HasName("pk_auth_client_id_p_restrictions");

                    b.ToTable("AuthClientIdPRestrictions", (string)null);
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.Clients.ClientPostLogoutRedirectUri", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT")
                        .HasColumnName("client_id");

                    b.Property<string>("PostLogoutRedirectUri")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasColumnName("post_logout_redirect_uri");

                    b.HasKey("ClientId", "PostLogoutRedirectUri")
                        .HasName("pk_auth_client_post_logout_redirect_uris");

                    b.ToTable("AuthClientPostLogoutRedirectUris", (string)null);
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.Clients.ClientProperty", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT")
                        .HasColumnName("client_id");

                    b.Property<string>("Key")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT")
                        .HasColumnName("key");

                    b.Property<string>("Value")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("ClientId", "Key", "Value")
                        .HasName("pk_auth_client_properties");

                    b.ToTable("AuthClientProperties", (string)null);
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.Clients.ClientRedirectUri", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT")
                        .HasColumnName("client_id");

                    b.Property<string>("RedirectUri")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasColumnName("redirect_uri");

                    b.HasKey("ClientId", "RedirectUri")
                        .HasName("pk_auth_client_redirect_uris");

                    b.ToTable("AuthClientRedirectUris", (string)null);
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.Clients.ClientScope", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT")
                        .HasColumnName("client_id");

                    b.Property<string>("Scope")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("scope");

                    b.HasKey("ClientId", "Scope")
                        .HasName("pk_auth_client_scopes");

                    b.ToTable("AuthClientScopes", (string)null);
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.Clients.ClientSecret", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT")
                        .HasColumnName("client_id");

                    b.Property<string>("Type")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("TEXT")
                        .HasColumnName("expiration");

                    b.HasKey("ClientId", "Type", "Value")
                        .HasName("pk_auth_client_secrets");

                    b.ToTable("AuthClientSecrets", (string)null);
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.Devices.DeviceFlowCodes", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("client_id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatorId");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("TEXT")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("device_code");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("expiration");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("session_id");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("subject_id");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("user_code");

                    b.HasKey("Id")
                        .HasName("pk_auth_device_flow_codes");

                    b.HasIndex("DeviceCode")
                        .IsUnique()
                        .HasDatabaseName("ix_auth_device_flow_codes_device_code");

                    b.HasIndex("Expiration")
                        .HasDatabaseName("ix_auth_device_flow_codes_expiration");

                    b.HasIndex("UserCode")
                        .HasDatabaseName("ix_auth_device_flow_codes_user_code");

                    b.ToTable("AuthDeviceFlowCodes", (string)null);
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.Grants.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("key");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("client_id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("consumed_time");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("creation_time");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("TEXT")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("TEXT")
                        .HasColumnName("expiration");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ExtraProperties");

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("session_id");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("subject_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.HasKey("Key")
                        .HasName("pk_auth_persisted_grants");

                    b.HasIndex("Expiration")
                        .HasDatabaseName("ix_auth_persisted_grants_expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type")
                        .HasDatabaseName("ix_auth_persisted_grants_subject_id_client_id_type");

                    b.HasIndex("SubjectId", "SessionId", "Type")
                        .HasDatabaseName("ix_auth_persisted_grants_subject_id_session_id_type");

                    b.ToTable("AuthPersistedGrants", (string)null);
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.IdentityResources.IdentityResource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("TEXT")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("display_name");

                    b.Property<bool>("Emphasize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("emphasize");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("enabled");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("TEXT")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<bool>("Required")
                        .HasColumnType("INTEGER")
                        .HasColumnName("required");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("INTEGER")
                        .HasColumnName("show_in_discovery_document");

                    b.HasKey("Id")
                        .HasName("pk_auth_identity_resources");

                    b.ToTable("AuthIdentityResources", (string)null);
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.IdentityResources.IdentityResourceClaim", b =>
                {
                    b.Property<Guid>("IdentityResourceId")
                        .HasColumnType("TEXT")
                        .HasColumnName("identity_resource_id");

                    b.Property<string>("Type")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.HasKey("IdentityResourceId", "Type")
                        .HasName("pk_auth_identity_resource_claims");

                    b.ToTable("AuthIdentityResourceClaims", (string)null);
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.IdentityResources.IdentityResourceProperty", b =>
                {
                    b.Property<Guid>("IdentityResourceId")
                        .HasColumnType("TEXT")
                        .HasColumnName("identity_resource_id");

                    b.Property<string>("Key")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT")
                        .HasColumnName("key");

                    b.Property<string>("Value")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("IdentityResourceId", "Key", "Value")
                        .HasName("pk_auth_identity_resource_properties");

                    b.ToTable("AuthIdentityResourceProperties", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityClaimType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_static");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Regex")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("regex");

                    b.Property<string>("RegexDescription")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("regex_description");

                    b.Property<bool>("Required")
                        .HasColumnType("INTEGER")
                        .HasColumnName("required");

                    b.Property<int>("ValueType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("value_type");

                    b.HasKey("Id")
                        .HasName("pk_abp_claim_types");

                    b.ToTable("AbpClaimTypes", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityLinkUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid?>("SourceTenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("source_tenant_id");

                    b.Property<Guid>("SourceUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("source_user_id");

                    b.Property<Guid?>("TargetTenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("target_tenant_id");

                    b.Property<Guid>("TargetUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("target_user_id");

                    b.HasKey("Id")
                        .HasName("pk_abp_link_users");

                    b.HasIndex("SourceUserId", "SourceTenantId", "TargetUserId", "TargetTenantId")
                        .IsUnique()
                        .HasDatabaseName("ix_abp_link_users_source_user_id_source_tenant_id_target_user_id_target_tenant_id");

                    b.ToTable("AbpLinkUsers", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<int>("EntityVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("entity_version");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsDefault");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsPublic");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsStatic");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("normalized_name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("TenantId");

                    b.HasKey("Id")
                        .HasName("pk_abp_roles");

                    b.HasIndex("NormalizedName")
                        .HasDatabaseName("ix_abp_roles_normalized_name");

                    b.ToTable("AbpRoles", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT")
                        .HasColumnName("role_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("TenantId");

                    b.HasKey("Id")
                        .HasName("pk_abp_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_abp_role_claims_role_id");

                    b.ToTable("AbpRoleClaims", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentitySecurityLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .HasMaxLength(96)
                        .HasColumnType("TEXT")
                        .HasColumnName("action");

                    b.Property<string>("ApplicationName")
                        .HasMaxLength(96)
                        .HasColumnType("TEXT")
                        .HasColumnName("application_name");

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("browser_info");

                    b.Property<string>("ClientId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("client_ip_address");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("correlation_id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("creation_time");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("Identity")
                        .HasMaxLength(96)
                        .HasColumnType("TEXT")
                        .HasColumnName("identity");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("TenantId");

                    b.Property<string>("TenantName")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("tenant_name");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_abp_security_logs");

                    b.HasIndex("TenantId", "Action")
                        .HasDatabaseName("ix_abp_security_logs_tenant_id_action");

                    b.HasIndex("TenantId", "ApplicationName")
                        .HasDatabaseName("ix_abp_security_logs_tenant_id_application_name");

                    b.HasIndex("TenantId", "Identity")
                        .HasDatabaseName("ix_abp_security_logs_tenant_id_identity");

                    b.HasIndex("TenantId", "UserId")
                        .HasDatabaseName("ix_abp_security_logs_tenant_id_user_id");

                    b.ToTable("AbpSecurityLogs", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentitySession", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ClientId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("client_id");

                    b.Property<string>("Device")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("device");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("device_info");

                    b.Property<string>("IpAddresses")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("ip_addresses");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_accessed");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("session_id");

                    b.Property<DateTime>("SignedIn")
                        .HasColumnType("TEXT")
                        .HasColumnName("signed_in");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("TenantId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_abp_sessions");

                    b.HasIndex("Device")
                        .HasDatabaseName("ix_abp_sessions_device");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_abp_sessions_session_id");

                    b.HasIndex("TenantId", "UserId")
                        .HasDatabaseName("ix_abp_sessions_tenant_id_user_id");

                    b.ToTable("AbpSessions", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("TEXT")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("Email");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("EmailConfirmed");

                    b.Property<int>("EntityVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("entity_version");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsExternal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("IsExternal");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("TEXT")
                        .HasColumnName("LastModifierId");

                    b.Property<DateTimeOffset?>("LastPasswordChangeTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_password_change_time");

                    b.Property<bool>("LockoutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT")
                        .HasColumnName("lockout_end");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("NormalizedEmail");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("NormalizedUserName");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(16)
                        .HasColumnType("TEXT")
                        .HasColumnName("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("SecurityStamp");

                    b.Property<bool>("ShouldChangePasswordOnNextLogin")
                        .HasColumnType("INTEGER")
                        .HasColumnName("should_change_password_on_next_login");

                    b.Property<string>("Surname")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("Surname");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("TenantId");

                    b.Property<bool>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("UserName");

                    b.HasKey("Id")
                        .HasName("pk_abp_users");

                    b.HasIndex("Email")
                        .HasDatabaseName("ix_abp_users_email");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("ix_abp_users_normalized_email");

                    b.HasIndex("NormalizedUserName")
                        .HasDatabaseName("ix_abp_users_normalized_user_name");

                    b.HasIndex("UserName")
                        .HasDatabaseName("ix_abp_users_user_name");

                    b.ToTable("AbpUsers", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_value");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("TenantId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_abp_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_abp_user_claims_user_id");

                    b.ToTable("AbpUserClaims", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserDelegation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("end_time");

                    b.Property<Guid>("SourceUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("source_user_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("start_time");

                    b.Property<Guid>("TargetUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("target_user_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("TenantId");

                    b.HasKey("Id")
                        .HasName("pk_abp_user_delegations");

                    b.ToTable("AbpUserDelegations", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(196)
                        .HasColumnType("TEXT")
                        .HasColumnName("provider_key");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("TenantId");

                    b.HasKey("UserId", "LoginProvider")
                        .HasName("pk_abp_user_logins");

                    b.HasIndex("LoginProvider", "ProviderKey")
                        .HasDatabaseName("ix_abp_user_logins_login_provider_provider_key");

                    b.ToTable("AbpUserLogins", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserOrganizationUnit", b =>
                {
                    b.Property<Guid>("OrganizationUnitId")
                        .HasColumnType("TEXT")
                        .HasColumnName("organization_unit_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("TenantId");

                    b.HasKey("OrganizationUnitId", "UserId")
                        .HasName("pk_abp_user_organization_units");

                    b.HasIndex("UserId", "OrganizationUnitId")
                        .HasDatabaseName("ix_abp_user_organization_units_user_id_organization_unit_id");

                    b.ToTable("AbpUserOrganizationUnits", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT")
                        .HasColumnName("role_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("TenantId");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_abp_user_roles");

                    b.HasIndex("RoleId", "UserId")
                        .HasDatabaseName("ix_abp_user_roles_role_id_user_id");

                    b.ToTable("AbpUserRoles", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("TenantId");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_abp_user_tokens");

                    b.ToTable("AbpUserTokens", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("TEXT")
                        .HasColumnName("Code");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("TEXT")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("DisplayName");

                    b.Property<int>("EntityVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("entity_version");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("TEXT")
                        .HasColumnName("LastModifierId");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("parent_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("TenantId");

                    b.HasKey("Id")
                        .HasName("pk_abp_organization_units");

                    b.HasIndex("Code")
                        .HasDatabaseName("ix_abp_organization_units_code");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_abp_organization_units_parent_id");

                    b.ToTable("AbpOrganizationUnits", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnitRole", b =>
                {
                    b.Property<Guid>("OrganizationUnitId")
                        .HasColumnType("TEXT")
                        .HasColumnName("organization_unit_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("TenantId");

                    b.HasKey("OrganizationUnitId", "RoleId")
                        .HasName("pk_abp_organization_unit_roles");

                    b.HasIndex("RoleId", "OrganizationUnitId")
                        .HasDatabaseName("ix_abp_organization_unit_roles_role_id_organization_unit_id");

                    b.ToTable("AbpOrganizationUnitRoles", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionDefinitionRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("display_name");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("TEXT")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("group_name");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_enabled");

                    b.Property<byte>("MultiTenancySide")
                        .HasColumnType("INTEGER")
                        .HasColumnName("multi_tenancy_side");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("ParentName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("parent_name");

                    b.Property<string>("Providers")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("providers");

                    b.Property<string>("StateCheckers")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("state_checkers");

                    b.HasKey("Id")
                        .HasName("pk_abp_permissions");

                    b.HasIndex("GroupName")
                        .HasDatabaseName("ix_abp_permissions_group_name");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_abp_permissions_name");

                    b.ToTable("AbpPermissions", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionGrant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("provider_name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("TenantId");

                    b.HasKey("Id")
                        .HasName("pk_abp_permission_grants");

                    b.HasIndex("TenantId", "Name", "ProviderName", "ProviderKey")
                        .IsUnique()
                        .HasDatabaseName("ix_abp_permission_grants_tenant_id_name_provider_name_provider_key");

                    b.ToTable("AbpPermissionGrants", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionGroupDefinitionRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("display_name");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("TEXT")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_abp_permission_groups");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_abp_permission_groups_name");

                    b.ToTable("AbpPermissionGroups", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.TenantManagement.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("TEXT")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("DeletionTime");

                    b.Property<int>("EntityVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("entity_version");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("TEXT")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_abp_tenants");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_abp_tenants_name");

                    b.HasIndex("NormalizedName")
                        .HasDatabaseName("ix_abp_tenants_normalized_name");

                    b.ToTable("AbpTenants", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.TenantManagement.TenantConnectionString", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("TEXT")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("TenantId", "Name")
                        .HasName("pk_abp_tenant_connection_strings");

                    b.ToTable("AbpTenantConnectionStrings", (string)null);
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.ApiResources.ApiResourceClaim", b =>
                {
                    b.HasOne("Starshine.Authservice.Domain.ApiResources.ApiResource", null)
                        .WithMany("UserClaims")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auth_api_resource_claims_auth_api_resources_api_resource_id");
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.ApiResources.ApiResourceProperty", b =>
                {
                    b.HasOne("Starshine.Authservice.Domain.ApiResources.ApiResource", null)
                        .WithMany("Properties")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auth_api_resource_properties_auth_api_resources_api_resource_id");
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.ApiResources.ApiResourceScope", b =>
                {
                    b.HasOne("Starshine.Authservice.Domain.ApiResources.ApiResource", null)
                        .WithMany("Scopes")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auth_api_resource_scopes_auth_api_resources_api_resource_id");
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.ApiResources.ApiResourceSecret", b =>
                {
                    b.HasOne("Starshine.Authservice.Domain.ApiResources.ApiResource", null)
                        .WithMany("Secrets")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auth_api_resource_secrets_auth_api_resources_api_resource_id");
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.ApiScopes.ApiScopeClaim", b =>
                {
                    b.HasOne("Starshine.Authservice.Domain.ApiScopes.ApiScope", null)
                        .WithMany("UserClaims")
                        .HasForeignKey("ApiScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auth_api_scope_claims_auth_api_scopes_api_scope_id");
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.ApiScopes.ApiScopeProperty", b =>
                {
                    b.HasOne("Starshine.Authservice.Domain.ApiScopes.ApiScope", null)
                        .WithMany("Properties")
                        .HasForeignKey("ApiScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auth_api_scope_properties_auth_api_scopes_api_scope_id");
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.Clients.ClientClaim", b =>
                {
                    b.HasOne("Starshine.Authservice.Domain.Clients.Client", null)
                        .WithMany("Claims")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auth_client_claims_auth_clients_client_id");
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.Clients.ClientCorsOrigin", b =>
                {
                    b.HasOne("Starshine.Authservice.Domain.Clients.Client", null)
                        .WithMany("AllowedCorsOrigins")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auth_client_cors_origins_auth_clients_client_id");
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.Clients.ClientGrantType", b =>
                {
                    b.HasOne("Starshine.Authservice.Domain.Clients.Client", null)
                        .WithMany("AllowedGrantTypes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auth_client_grant_types_auth_clients_client_id");
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.Clients.ClientIdPRestriction", b =>
                {
                    b.HasOne("Starshine.Authservice.Domain.Clients.Client", null)
                        .WithMany("IdentityProviderRestrictions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auth_client_id_p_restrictions_auth_clients_client_id");
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.Clients.ClientPostLogoutRedirectUri", b =>
                {
                    b.HasOne("Starshine.Authservice.Domain.Clients.Client", null)
                        .WithMany("PostLogoutRedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auth_client_post_logout_redirect_uris_auth_clients_client_id");
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.Clients.ClientProperty", b =>
                {
                    b.HasOne("Starshine.Authservice.Domain.Clients.Client", null)
                        .WithMany("Properties")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auth_client_properties_auth_clients_client_id");
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.Clients.ClientRedirectUri", b =>
                {
                    b.HasOne("Starshine.Authservice.Domain.Clients.Client", null)
                        .WithMany("RedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auth_client_redirect_uris_auth_clients_client_id");
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.Clients.ClientScope", b =>
                {
                    b.HasOne("Starshine.Authservice.Domain.Clients.Client", null)
                        .WithMany("AllowedScopes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auth_client_scopes_auth_clients_client_id");
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.Clients.ClientSecret", b =>
                {
                    b.HasOne("Starshine.Authservice.Domain.Clients.Client", null)
                        .WithMany("ClientSecrets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auth_client_secrets_auth_clients_client_id");
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.IdentityResources.IdentityResourceClaim", b =>
                {
                    b.HasOne("Starshine.Authservice.Domain.IdentityResources.IdentityResource", null)
                        .WithMany("UserClaims")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auth_identity_resource_claims_auth_identity_resources_identity_resource_id");
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.IdentityResources.IdentityResourceProperty", b =>
                {
                    b.HasOne("Starshine.Authservice.Domain.IdentityResources.IdentityResource", null)
                        .WithMany("Properties")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auth_identity_resource_properties_auth_identity_resources_identity_resource_id");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_abp_role_claims_abp_roles_role_id");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_abp_user_claims_abp_users_user_id");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_abp_user_logins_abp_users_user_id");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserOrganizationUnit", b =>
                {
                    b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                        .WithMany()
                        .HasForeignKey("OrganizationUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_abp_user_organization_units_abp_organization_units_organization_unit_id");

                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("OrganizationUnits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_abp_user_organization_units_abp_users_user_id");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_abp_user_roles_roles_role_id");

                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_abp_user_roles_abp_users_user_id");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_abp_user_tokens_abp_users_user_id");
                });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                {
                    b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_abp_organization_units_abp_organization_units_parent_id");
                });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnitRole", b =>
                {
                    b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                        .WithMany("Roles")
                        .HasForeignKey("OrganizationUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_abp_organization_unit_roles_abp_organization_units_organization_unit_id");

                    b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_abp_organization_unit_roles_abp_roles_role_id");
                });

            modelBuilder.Entity("Volo.Abp.TenantManagement.TenantConnectionString", b =>
                {
                    b.HasOne("Volo.Abp.TenantManagement.Tenant", null)
                        .WithMany("ConnectionStrings")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_abp_tenant_connection_strings_abp_tenants_tenant_id");
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.ApiResources.ApiResource", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("Scopes");

                    b.Navigation("Secrets");

                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.ApiScopes.ApiScope", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.Clients.Client", b =>
                {
                    b.Navigation("AllowedCorsOrigins");

                    b.Navigation("AllowedGrantTypes");

                    b.Navigation("AllowedScopes");

                    b.Navigation("Claims");

                    b.Navigation("ClientSecrets");

                    b.Navigation("IdentityProviderRestrictions");

                    b.Navigation("PostLogoutRedirectUris");

                    b.Navigation("Properties");

                    b.Navigation("RedirectUris");
                });

            modelBuilder.Entity("Starshine.Authservice.Domain.IdentityResources.IdentityResource", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRole", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("OrganizationUnits");

                    b.Navigation("Roles");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Volo.Abp.TenantManagement.Tenant", b =>
                {
                    b.Navigation("ConnectionStrings");
                });
#pragma warning restore 612, 618
        }
    }
}
